[
  {
    "objectID": "DataSHIELD_workshop_CADSET.html",
    "href": "DataSHIELD_workshop_CADSET.html",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "",
    "text": "This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code.\nTry executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Ctrl+Shift+Enter."
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#installing-datashield",
    "href": "DataSHIELD_workshop_CADSET.html#installing-datashield",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Installing DataSHIELD",
    "text": "Installing DataSHIELD\nFirstly: check whether we have the right R packages installed to run DataSHIELD: using the very helpful devtools package (which has already been installed for us by Stuart!), we’ll use the “Session info” command:\n\ninstall.packages(\"devtools\")\nlibrary(devtools)\ndevtools::session_info()\n\nWe are missing some of the necessary packages: “DSI”, “DSOpal” and “dsBaseClient”.\n\ninstall.packages('DSI')\ninstall.packages('DSOpal')\n\n\ninstall.packages(\"https://cran.r-project.org/src/contrib/Archive/panelaggregation/panelaggregation_0.1.1.tar.gz\", repos = NULL, type = 'source')\n\ninstall.packages('dsBaseClient', repos=c(getOption('repos'),  'http://cran.datashield.org'), dependencies=TRUE)\n\ninstall.packages(\"metafor\")\ndevtools::install_github(\"timcadman/ds-helper\")\n\nAlso some packages for Armadillo\n\ninstall.packages(\"MolgenisArmadillo\")\ninstall.packages(\"DSMolgenisArmadillo\")\n\nRemember to load them into this R session using “library()” command:\n\nlibrary(DSI)\n\nLoading required package: progress\n\n\nLoading required package: R6\n\nlibrary(DSOpal)\n\nLoading required package: opalr\n\n\nLoading required package: httr\n\nlibrary(MolgenisArmadillo)\nlibrary(DSMolgenisArmadillo)\n\nLoading required package: MolgenisAuth\n\n\n\nAttaching package: 'DSMolgenisArmadillo'\n\n\nThe following object is masked from 'package:MolgenisArmadillo':\n\n    armadillo.get_token\n\nlibrary(dsBaseClient)\nlibrary(dsHelper)\nlibrary(metafor)\n\nLoading required package: Matrix\n\n\nLoading required package: metadat\n\n\nLoading required package: numDeriv\n\n\n\nLoading the 'metafor' package (version 4.8-0). For an\nintroduction to the package please type: help(metafor)\n\n\nCheck that they have now been added:\n\ndevtools::session_info()"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#logging-in-and-assigning-data",
    "href": "DataSHIELD_workshop_CADSET.html#logging-in-and-assigning-data",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Logging in and assigning data",
    "text": "Logging in and assigning data\nThe login script has to be customized to fit the data you are trying to connect to.\nThe “builder &lt;-” and “builder$append” functions are standard features.\nFor this demonstration we are connecting to simulated data- but if it was data of real people, it would be very important for us not to be able to see individual patients’ information.\nFor this workshop, we’ll imagine that the data is hosted in a single three/four Opal repositories and one Armadillo. The below code creates a local R object with the login details for each study:\n\nbuilder &lt;- DSI::newDSLoginBuilder()\n\n# Server 1: France \nbuilder$append(\n  server = 'France', \n  url = \"https://opal-demo.obiba.org\",\n  user = \"dsuser\", \n  password = \"P@ssw0rd\"\n)\n\n# Server 2: Spain (ISGlobal)\nbuilder$append(\n  server = 'ISGlobal', \n  url = \"https://opal.isglobal.org/repo\",\n  user = \"invited\", \n  password = \"12345678Aa@\"\n)\n\n# Server 3: UK (Imperial)\nbuilder$append(\n  server = \"Imperial\",\n  url = \"https://cadset.dsi.ic.ac.uk/\",\n  user = \"jrgonzalez\",\n  password = \"Cadset_test1!\"\n)\n\n# Server 4: LEAD\n# builder$append(\n#   server = 'LEAD', \n#   url = \"https://ods.lbg.ac.at\",\n#   user = \"JuanGonzalez\", \n#   password = \"Gp7#vXq9Lz\"\n# )\n\nFor Groningen we need to connect through Molgenis and we require a personal token\n\ntoken &lt;- armadillo.get_token(\"https://cadsetgroningennl.molgeniscloud.org/\")\n\n# Server 5: Groningen\nbuilder$append(\n  server = \"Groningen\", \n  url = \"https://cadsetgroningennl.molgeniscloud.org/\", \n  token = token, \n  driver = \"ArmadilloDriver\"\n)\n\nNow we need to connect, referring to the login information in the data frame we have just created:\n\nlogindata &lt;- builder$build()\nconns &lt;- DSI::datashield.login(logins = logindata, \n                                     assign = FALSE)\n\n\nLogging into the collaborating servers\n\n\nThe ‘assign’ argument can be set to either ‘TRUE’ or ‘FALSE’. If set to ‘TRUE’, all the available variables within that table will be assigned to a serverside data frame and available to access. If you only need a small subset of available variables it can be preferable to set this to ‘FALSE’ and later use the function ‘datashield.assign’ to separately assign only the variables you need (as it is this case). The output of this box has useful progress bars which show the progress of connecting to studies, one by one.\nWe can see the serverside doesn’t have any object by running:\n\nds.ls()\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\ncharacter(0)\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\ncharacter(0)\n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\ncharacter(0)\n\n\nWe need to create the objects etither form tables (e.g. a data frame called cadset ) or resources.\nFor ISGlobal, Imperial and Groningen we have tables\n\ndatashield.assign.table(conns[2:4], symbol = \"cadset\", \n                        table = list(\n                          ISGlobal = \"CADSET.cadset_four\",\n                          Imperial = \"CADSET.cadset_six\"\n                          # Groningen = \"cad/folder/data\"\n                        )\n                      )\n\nand France contains a resource\n\ndatashield.assign.resource(\n  conns$France,\n  symbol = \"resource\",\n  resource = list(France = \"CADSET-coh1.cadset_1\")\n  )\n\ndatashield.assign.expr(\n  conns$France,\n  symbol = \"cadset\",\n  expr = quote(as.resource.data.frame(resource))\n)\n\nNow we can see that each server has the data in an object called cadset\n\nds.ls()\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"cadset\"   \"resource\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"cadset\"\n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\n[1] \"cadset\"\n\n\nwhich is a data.fame\n\nds.class(\"cadset\")\n\n$France\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n$ISGlobal\n[1] \"data.frame\"\n\n$Imperial\n[1] \"data.frame\"\n\n\nand the data.frame has these variables\n\nds.colnames(\"cadset\")"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#describing-data-aggregate-type-functions",
    "href": "DataSHIELD_workshop_CADSET.html#describing-data-aggregate-type-functions",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Describing data (‘aggregate-type functions’)",
    "text": "Describing data (‘aggregate-type functions’)\nThere are many data exploration functions already implemented into DataSHIELD: let’s check it out at the wiki https://data2knowledge.atlassian.net/wiki/spaces/DSDEV/pages/2733244417/Version+6.2.0\nScroll down to “Data structure queries”. Let’s try out a few of these:\n\nds.dim(x=\"cadset\", datasources = conns)\n\n$`dimensions of cadset in France`\n[1] 3000   15\n\n$`dimensions of cadset in ISGlobal`\n[1] 5500   15\n\n$`dimensions of cadset in Imperial`\n[1] 3350   15\n\n$`dimensions of cadset in combined studies`\n[1] 11850    15\n\n\nNOTE: writting datasources = conns is not required. This is just to emphasize that if you have several connections you need to specify which one is yours. By default, it missing it looks for your local environment\n\nls()\n\n[1] \"builder\"   \"conns\"     \"logindata\"\n\n\nSo, this would also work\n\nds.dim(\"cadset\")\n\n$`dimensions of cadset in France`\n[1] 3000   15\n\n$`dimensions of cadset in ISGlobal`\n[1] 5500   15\n\n$`dimensions of cadset in Imperial`\n[1] 3350   15\n\n$`dimensions of cadset in combined studies`\n[1] 11850    15\n\n# ds.colnames(\"cadset\")\n\nWhat it is mandatory is to write the name of the data.frame with ““.\n\nWe’re going to be focus on FEV1.\nThis is a measure of HDL Cholesterol (aka the “good cholesterol” level)\nLet’s run some summary statistic commands\n\nds.class(x='cadset$fev1_cadset')\n\n$France\n[1] \"numeric\"\n\n$ISGlobal\n[1] \"numeric\"\n\n$Imperial\n[1] \"numeric\"\n\nds.length(x='cadset$fev1_cadset')\n\n$`length of cadset$fev1_cadset in France`\n[1] 3000\n\n$`length of cadset$fev1_cadset in ISGlobal`\n[1] 5500\n\n$`length of cadset$fev1_cadset in Imperial`\n[1] 3350\n\n$`total length of cadset$fev1_cadset in all studies combined`\n[1] 11850\n\nds.mean(x='cadset$fev1_cadset')\n\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        3827.003        0   3000   3000\nISGlobal      3778.882        0   5500   5500\nImperial      3805.334        0   3350   3350\n\n$Nstudies\n[1] 3\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\nImperial \"VALID ANALYSIS\"\n\n\nWhat is this other function to obtain the mean? Let’s use the DataSHIELD function help documentation.\n\n?ds.quantileMean\n\nNow, putting into action some of what we’ve learned about the function arguments. NOTE: ‘split’ is in case you have data from different servers and you want to see the statistic one by one.\n\nds.quantileMean(x='cadset$fev1_cadset')\n\n Quantiles of the pooled data\n\n\n      5%      10%      25%      50%      75%      90%      95%     Mean \n2596.920 2811.561 3195.781 3716.498 4370.422 4936.329 5221.392 3798.543 \n\nds.quantileMean(x='cadset$fev1_cadset', type = \"split\")\n\n$France\n      5%      10%      25%      50%      75%      90%      95%     Mean \n2650.000 2860.000 3220.000 3750.000 4390.000 4951.000 5200.000 3827.003 \n\n$ISGlobal\n      5%      10%      25%      50%      75%      90%      95%     Mean \n2560.000 2780.000 3180.000 3690.000 4360.000 4920.000 5240.000 3778.882 \n\n$Imperial\n      5%      10%      25%      50%      75%      90%      95%     Mean \n2610.000 2820.000 3200.000 3730.000 4370.000 4950.000 5210.000 3805.334 \n\n\nTrying to calculate the variance of FEV1:\n\n?ds.var\n\n\nds.var(x = 'cadset$fev1_cadset', type = \"split\")\n\n$Variance.by.Study\n         EstimatedVar Nmissing Nvalid Ntotal\nFrance       646280.3        0   3000   3000\nISGlobal     689287.2        0   5500   5500\nImperial     678485.1        0   3350   3350\n\n$Nstudies\n[1] 3\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\nImperial \"VALID ANALYSIS\"\n\n\nCan we store the results calculated from a DataSHIELD analysis in a local R session?\nYes- the output of aggregate functions are always R objects, hence can be stored.\n\na&lt;-ds.var(x = 'cadset$fev1_cadset', type = \"split\")[[1]]\na\n\n         EstimatedVar Nmissing Nvalid Ntotal\nFrance       646280.3        0   3000   3000\nISGlobal     689287.2        0   5500   5500\nImperial     678485.1        0   3350   3350\n\nb&lt;-ds.var(x = 'cadset$fev1_cadset', type = \"split\")[[1]][[1,1]]\nb\n\n[1] 646280.3\n\n\nThe square brackets are because we are trying to access an element of a list- which is the R object that DataSHIELD aggregate functions output as.\nFactor variables visualize by simply writting\n\n# ds.table(\"cadset$malesex_cadset\")\n\n\n\nUsing dsHelper to retrieve statistics in a neater format.\nAs you may have noticed, some operations which are more straightforward in R can be more complicated in datashield. To help with this, the dsHelper package allows you to do some common operations in fewer lines of code. DsHelper is an entirely serverside package - it contains only clientside functions which call DataSHIELD functions serverside.\nWe have seen datashield has a range of functions to retrieve statistics, but is limited in that (i) you need to use different functions for different statistics, (ii) you can only get stats for one variable at a time. dh.GetStats returns many useful stats in a tibble, and allows you to retrieve stats for multiple variables at a time.\n\nneat_stats &lt;- dh.getStats(\n    df = \"cadset\",\n  vars = c(\"age_cadset\", \"fev1_cadset\", \"fvc_cadset\", \"packyears_cadset\",\n           \"eversmoker_cadset\", \"fev1pcpredicted_cadset\"))\n           \nneat_stats\n\nLet us see what happened:\n\ndatashield.errors()"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#manipulating-data-assign-type-functions",
    "href": "DataSHIELD_workshop_CADSET.html#manipulating-data-assign-type-functions",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Manipulating data (‘assign-type’ functions)",
    "text": "Manipulating data (‘assign-type’ functions)\nAssign-type functions are ones where a calculation is done on the data stored at the server (and results of that calculation are “assigned” to a serverside variable, and saved there), but is NOT transmitted back to the user.\nThe reason for this is that some calculations could be highly disclosive- and if such data were transmitted to the analyst, with not much effort at all, with an inverse function, the analyst could work out exactly what the raw data are- and thus the data’s privacy is broken!\nTo demonstrate:\n\nds.ls(datasources = conns)\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"cadset\"   \"resource\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"cadset\"\n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\n[1] \"cadset\"\n\nds.log(x='cadset$fev1_cadset', newobj='hdl_log', datasources = conns)\nds.ls(datasources = conns)\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"cadset\"   \"hdl_log\"  \"resource\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"cadset\"  \"hdl_log\"\n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\n[1] \"cadset\"  \"hdl_log\"\n\nds.mean(x=\"hdl_log\",datasources= conns)\n\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        8.227583        0   3000   3000\nISGlobal      8.212621        0   5500   5500\nImperial      8.220318        0   3350   3350\n\n$Nstudies\n[1] 3\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\nImperial \"VALID ANALYSIS\"\n\n# ds.mean(x=\"D$hdl\",datasources= conns)\n\nThe second “ds.mean” shows that the mean of the logged values are definitely smaller, by about the right amount. The DataSHIELD log function has worked.\nThere is another DataSHIELD assign function that can be used for data transformations - a square root function. Let’s test again:\n\nds.sqrt(x='cadset$fev1_cadset', newobj='fev1_sqrt')\nds.ls()\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"cadset\"    \"fev1_sqrt\" \"hdl_log\"   \"resource\" \n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"cadset\"    \"fev1_sqrt\" \"hdl_log\"  \n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\n[1] \"cadset\"    \"fev1_sqrt\" \"hdl_log\"  \n\nds.mean(x=\"fev1_sqrt\")\n\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        61.52198        0   3000   3000\nISGlobal      61.10012        0   5500   5500\nImperial      61.32453        0   3350   3350\n\n$Nstudies\n[1] 3\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\nImperial \"VALID ANALYSIS\"\n\nds.mean(x=\"cadset$fev1_cadset\")\n\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        3827.003        0   3000   3000\nISGlobal      3778.882        0   5500   5500\nImperial      3805.334        0   3350   3350\n\n$Nstudies\n[1] 3\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\nImperial \"VALID ANALYSIS\"\n\n\nThese new objects are not attached to a dataframe. Use the help function to find out about the ds.dataFrame function, which can be used to combine objects.\nNow join “fev1_sqrt” and “fev1_log” to the dataframe “cadset”.\n\n# ds.dataFrame(c(\"cadset\", \"fev1_sqrt\", \"fev1_log\"), newobj = \"cadset\")\n# ds.colnames(\"cadset\")\n\nEXERCISE: Using some of the functions above, explore the distribution of the variable “packyears_cadset” in dataframe “cadset”.\nHere you see this has returned a list of two tibbles separated into continuous and categorical information. For the categorical variables info is returned on ns, percentages and missingness within each category, whilst for continuous variables info is returned on mean, standard deviation, quantiles and also missingness."
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#sub-setting-data",
    "href": "DataSHIELD_workshop_CADSET.html#sub-setting-data",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Sub-setting data",
    "text": "Sub-setting data\nIn DataSHIELD there is one function that allows sub-setting of data, ds.dataFrameSubset .\nYou may wish to use it to:\nSubset a column of data by its “Class” Subset a dataframe to remove any “NA”s Subset a numeric column of a dataframe using a Boolean inequalilty\n\n# first find the column name you wish to refer to\n# ds.colnames(x=\"cadset\")\n# then check which levels you need to apply a boolean operator to:\n# ds.levels(x=\"cadset$malesex_cadset\")\n?ds.dataFrameSubset"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#data-manipulation-with-dshelper",
    "href": "DataSHIELD_workshop_CADSET.html#data-manipulation-with-dshelper",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Data manipulation with dsHelper",
    "text": "Data manipulation with dsHelper\nWe can use some dsHelper functions to do data manipulation operations in a more efficient way.\n\nCreate a subset of columns by a vector of column names\n\ndh.dropCols(\n    df = \"cadset\", \n  vars = c(\"cohort_cadset\", \"age_cadset\"), \n  type = \"keep\",\n  new_obj = \"df_subset\")\n\nWarning: `dh.dropCols()` was deprecated in dsHelper 1.6.0.\nℹ Please use `dsTidyverseClient::ds.select()` instead.\n\n\n$France\n$France$is.object.created\n[1] \"A data object &lt;df_subset&gt; has been created in all specified data sources\"\n\n$France$validity.check\n[1] \"&lt;df_subset&gt; appears valid in all sources\"\n\n\n$ISGlobal\n$ISGlobal$is.object.created\n[1] \"A data object &lt;df_subset&gt; has been created in all specified data sources\"\n\n$ISGlobal$validity.check\n[1] \"&lt;df_subset&gt; appears valid in all sources\"\n\n\n$Imperial\n$Imperial$is.object.created\n[1] \"A data object &lt;df_subset&gt; has been created in all specified data sources\"\n\n$Imperial$validity.check\n[1] \"&lt;df_subset&gt; appears valid in all sources\"\n\nds.colnames(\"df_subset\")\n\n$France\n[1] \"cohort_cadset\" \"age_cadset\"   \n\n$ISGlobal\n[1] \"cohort_cadset\" \"age_cadset\"   \n\n$Imperial\n[1] \"cohort_cadset\" \"age_cadset\"   \n\n\n\n\nRename variables\n\ndh.renameVars(\n    df = \"cadset\", \n  current_names = c(\"fev1_cadset\", \"age_cadset\"),\n  new_names = c(\"fev1\", \"age\"))\n  \n# ds.colnames(\"cadset\")\n\nThere are many more dsHelper functions designed to make common operations easier in datashield, check out the vignettes at: https://github.com/timcadman/ds-helper/blob/master/vignettes/ds-helper-main-vignette.Rmd\nEXERCISE: try some of them (Transforming continuous variable to interquartile range; use dh.getStats(), …)"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#graphs",
    "href": "DataSHIELD_workshop_CADSET.html#graphs",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Graphs",
    "text": "Graphs\nVisualising the data we are studying is extremely important to get a sense of it. While it may seem disclosive at first glance, only such graphs that are definitively non-disclosive have been implemented within the DataSHIELD project.\n\nHistograms\nFirstly, histograms give a good sense of how one variable is distributed. But no individual points are disclosed because values are “binned” into groups of a similar magnitude, disguising what each one actually is. We protect privacy by removing bins with low counts (below specific threshold). If you have a symmetric distribution, you may find some things aren’t observed at the extreme ends.\nLet’s create a histogram of the variable we’ve been investigating for much of this study: FEV1 (now called “fev1”).\n\n?ds.histogram\nds.histogram(x='cadset$fev1', datasources = conns)\n\nUse the ds.histogram to explore the distribution of “fev1pcpredicted_cadset”\n\n\nScatterplots of two numerical variables\nWhen you generate a scatter plot, you can say that the data points that are displayed are not the actual values. The function gives you the choice on how to anonymise: either you anonymise the values by additional random noise; or you take the average of the k nearest neighbours. (for more details on how anonymisation methods are used for the generation of privacy-preserving visualisations you can have a look on the paper https://epjdatascience.springeropen.com/articles/10.1140/epjds/s13688-020-00257-4)\n\n# ds.scatterPlot(x=\"cadset$fev1\", y=\"cadset$weight_cadset\")\n\nOther DataSHIELD graphical functions allow the creation of box plots, heatmap plots and contour plots. Investigate them using their help functions:\n\n?ds.heatmapPlot\n?ds.contourPlot\n?ds.boxPlot"
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#analysis",
    "href": "DataSHIELD_workshop_CADSET.html#analysis",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "Analysis",
    "text": "Analysis\n\nSimple Linear Regression\nWe want to examine the relationship between BMI and HDL Cholesterol\n\n# ds.cor(x='cadset$fev1', y='cadset$weight_cadset')\n\nRegress FEV1 with weigth using the Individual Partition Data (IPD) approach:\nThe method for this (ds.glm) is a “pooled analysis”- equivalent to placing the individual-level data from all sources in one warehouse.\nImportant to note that the link function is by default the canonical link function for each family. So binomial &lt;-&gt; logistic link, poisson &lt;-&gt; log link, gaussian &lt;-&gt; identity link.\n\nmod &lt;- ds.glm(formula = \"cadset$fev1 ~ cadset$weight_cadset\", \n              family=\"gaussian\")\nmod\n\nWe can use ds-helper to nicely see the output\n\ndh.lmTab(\n  model = mod, \n  type = \"glm_ipd\", \n  direction = \"wide\", \n  ci_format  = \"separate\")\n\nWe can perfome Study-Level Meta-Analysis (SLMA) approach. See https://isglobal-brge.github.io/resource_bookdown/basic-statistical-analyses.html#analysis-from-a-multiple-studies\n\n\nModelling multiple variables and interactions\nAlso possible to model multiple explanatory variables and include interactions:\n\nglm_mod1&lt;-ds.glm(formula=\"cadset$fev1 ~ cadset$weight_cadset + \n                 cadset$weight_cadset*cadset$malesex_cadset +\n                 cadset$smokerstatus_cadset\",\n                 family = \"gaussian\")\n\nThe “*” between LAB_HDL and SEX means fit all possible main effects and interactions between the two covariates."
  },
  {
    "objectID": "DataSHIELD_workshop_CADSET.html#at-the-end-of-your-rstudio-server-analysis",
    "href": "DataSHIELD_workshop_CADSET.html#at-the-end-of-your-rstudio-server-analysis",
    "title": "DataSHIELD Workshop: Use case CADSETshield, Friday 4th July 2025",
    "section": "At the end of your RStudio Server analysis:",
    "text": "At the end of your RStudio Server analysis:\nYou can save your workspace:\n\nDSI::datashield.workspace_save(conns = conns, ws = \"workspace2025\")\n\nDon’t forget to log out! Using:\n\nDSI::datashield.logout(conns)\n\nYou can restore your workspace, the next time you want to continue with your analysis\n\nconns &lt;- datashield.login(logins = logindata, \n                          assign = TRUE, symbol = \"cadset\")\n\n\nLogging into the collaborating servers\n\nds.ls()\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\ncharacter(0)\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\ncharacter(0)\n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\ncharacter(0)\n\ndatashield.logout(conns)\n\nconns &lt;- datashield.login(logins = logindata, restore = \"workspace2025\")\n\n\nLogging into the collaborating servers\n\nds.ls()\n\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"cadset\"    \"df_subset\" \"fev1_sqrt\" \"hdl_log\"   \"ONES\"      \"resource\" \n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"cadset\"    \"df_subset\" \"fev1_sqrt\" \"hdl_log\"   \"ONES\"     \n\n\n$Imperial\n$Imperial$environment.searched\n[1] \"R_GlobalEnv\"\n\n$Imperial$objects.found\n[1] \"cadset\"    \"df_subset\" \"fev1_sqrt\" \"hdl_log\"   \"ONES\"     \n\n\nAlso you can delete unwanted workspaces using the datashield.workspace_rm\nIn Rstudio Server: DON’T forget to use the orange “quit the current R session” button (top right of browser screen) before closing the tab- otherwise you will experience an error message the next time you try to log in."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DataSHIELD CADSET Workshop",
    "section": "",
    "text": "This website hosts the materials and exercises for the DataSHIELD workshop for the CADSET project. On it you will find reading materials, setup tutorials, workshop indications and practical exercises.\nThe workshop is organized by Bioinformatics Research Group in Epidemiology (BRGE) from the Barcelona Institute for Global Health (iSGlobal)."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "DataSHIELD CADSET Workshop",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore starting the workshop, participants need to have the following software installed on their computers:\n\n1. RStudio Installation\nMake sure you have RStudio installed on your computer. If you don’t have it yet, download it from: - Download RStudio\n\n\n2. Rtools Installation (Windows users only)\nWindows users need to install Rtools to compile packages from source: - Download Rtools\nNote: Mac and Linux users typically don’t need this step as they have the necessary tools built-in.\n\n\n3. Required R Packages\nOnce you have RStudio and Rtools (if needed) installed, open RStudio and run the following commands to install all required packages:\n# Essential development tools\ninstall.packages('devtools')\n\n# Core DataSHIELD packages\ninstall.packages('DSI')\ninstall.packages('DSOpal')\n\n# Additional required packages\ninstall.packages(\"https://cran.r-project.org/src/contrib/Archive/panelaggregation/panelaggregation_0.1.1.tar.gz\", repos = NULL, type = 'source')\n\ninstall.packages('dsBaseClient', repos=c(getOption('repos'), 'http://cran.datashield.org'), dependencies=TRUE)\n\ninstall.packages(\"metafor\")\ndevtools::install_github(\"timcadman/ds-helper\")\n\n# Armadillo connection packages\ninstall.packages(\"MolgenisArmadillo\")\ninstall.packages(\"DSMolgenisArmadillo\")\n⚠️ Important Notes: - Package installation may take several minutes - If you encounter any errors during installation, please contact the workshop organizers - Make sure you have a stable internet connection during package installation"
  }
]